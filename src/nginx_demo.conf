# nginx.conf - OpenResty 配置文件

worker_processes auto;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

http {
    # 设置 Lua 包路径
    lua_package_path "/usr/local/openresty/lua/?.lua;;";
    
    # 初始化阶段加载模块
    init_by_lua_block {
        -- 预加载短链接模块
        local shortlink = require "shortlink"
        package.loaded["shortlink_global"] = shortlink
    }
    
    # 定时器，用于定期重新加载配置
    init_worker_by_lua_block {
        local shortlink = package.loaded["shortlink_global"]

        local function reload_timer(premature)
            if premature then
                return
            end
            
            -- 每60秒检查一次配置文件
            shortlink.reload_config_if_needed()
            
            -- 重新设置定时器
            local ok, err = ngx.timer.at(60, reload_timer)
            if not ok then
                ngx.log(ngx.ERR, "Failed to create timer: ", err)
            end
        end
        
        -- 启动定时器
        local ok, err = ngx.timer.at(60, reload_timer)
        if not ok then
            ngx.log(ngx.ERR, "Failed to create initial timer: ", err)
        end
    }
    
    # 设置默认响应类型
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log logs/access.log main;
    
    # 服务器配置
    server {
        listen 80;
        server_name your-shortlink-domain.com;  # 替换为你的域名
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # 管理端点 - 手动重新加载配置
        location /admin/reload {
            access_log off;
            content_by_lua_block {
                local shortlink = package.loaded["shortlink_global"]
                shortlink.reload_config_if_needed()
                ngx.say("Config reloaded")
            }
        }
        
        # 短链接处理
        location ~ ^/([a-zA-Z0-9]+)$ {
            content_by_lua_block {
                local shortlink = package.loaded["shortlink_global"]
                shortlink.handle_redirect()
            }
        }
        
        # 根路径
        location = / {
            return 200 "Short Link Service\n";
            add_header Content-Type text/plain;
        }
        
        # 404 处理
        location / {
            return 404 "Page not found\n";
            add_header Content-Type text/plain;
        }
    }
    
    # HTTPS 配置 (可选)
    server {
        listen 443 ssl;
        server_name your-shortlink-domain.com;
        
        # SSL 证书配置
        # ssl_certificate /path/to/cert.pem;
        # ssl_certificate_key /path/to/key.pem;
        
        # 其他配置与 HTTP 相同
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        location /admin/reload {
            access_log off;
            content_by_lua_block {
                shortlink.reload_config_if_needed()
                ngx.say("Config reloaded")
            }
        }
        
        location ~ ^/([a-zA-Z0-9]+)$ {
            content_by_lua_block {
                shortlink.handle_redirect()
            }
        }
        
        location = / {
            return 200 "Short Link Service (HTTPS)\n";
            add_header Content-Type text/plain;
        }
        
        location / {
            return 404 "Page not found\n";
            add_header Content-Type text/plain;
        }
    }
}
